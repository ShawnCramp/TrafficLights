-- **************************************************************************
-- Name: 			Shawn Cramp
-- Student ID: 	111007290
-- Name:				Edward Huang
-- Student ID:		*********
-- Version: 		2014-11-23
-- Description:	Main VHD File for CP319 Traffic Lights Project
-- **************************************************************************

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity Entity_Traffic is
	port ( 	
				Reset				: in std_logic;
				Clock_1Hz		: in std_logic;
				
				Day_Night		: in std_logic;
				Cross_Walk		: in std_logic;
				
				Left_Queue_NS	: in std_logic_vector(1 downto 0);
				Left_Queue_EW	: in std_logic_vector(1 downto 0);
				
				Counter			: in std_logic_vector(4 downto 0);
				
				Test_Shutoff	: out std_logic_vector(3 downto 0);
				Lights 			: buffer std_logic_vector(23 downto 0);
				
				Counter_Reset 	: out std_logic
			);
end entity Entity_Traffic;

architecture arch_TrafficLights of Entity_Traffic is
-- **************************************************************************
	-- A0: Advance from South turning West, A1: Advance from West turning North, A2: Advance from North Turning East
	-- A3: Advance from East turning South, A4: Advance from North and South, A5: Advance from West and East
	
-- **************************************************************************

	type State_Type is (S0, S1, S2, S3, S4, S5, A0, A1, A2, A3, A4, A5, N0, N1, N2, N3);
	
	signal State 			: State_Type;
	
	signal Counter_Reset_I : std_logic;
	
	constant Advanced_Switch: std_logic_vector(4 downto 0)	:= "00101";
	constant Green_Switch	: std_logic_vector(4 downto 0)	:= "00010";
	constant Yellow_Switch 	: std_logic_vector(4 downto 0) 	:= "11101";
	constant Red_Switch 		: std_logic_vector(4 downto 0) 	:= "00101";
	
begin
Test_Shutoff <= "1111";
process (Counter, Reset, State)

begin
	if Reset = '1' then
		State <= S0;
	elsif (rising_edge(Clock_1hz)) then
		case State is
			
			-- Light States
			when S0 =>
				if Counter < Yellow_Switch then
					State <= S0;
					Counter_Reset_I <= '0';
				else
					State <= S1;
					Counter_Reset_I <= '1';
				end if;
			when S1 =>
				if Counter < Red_Switch then
					State <= S1;
					Counter_Reset_I <= '0';
				else
					State <= S2;
					Counter_Reset_I <= '1';
				end if;
			when S2 =>
				if Counter < Green_Switch then
					State <= S2;
					Counter_Reset_I <= '0';
				else
					if Left_Queue_EW = "01" then -- From West Left Car Queue
						State <= A1;
						Counter_Reset_I <= '1';
					elsif Left_Queue_EW = "10" then -- From East Left Car Queue
						State <= A3;
						Counter_Reset_I <= '1';
					elsif Left_Queue_EW = "11" then -- From East and West Left Car Queue
						State <= A5;
						Counter_Reset_I <= '1';
					else									-- No Left Car Queue
						State <= S3;
						Counter_Reset_I <= '1';
					end if;
				end if;
				
			-- Advanced Turn States
			when A1 =>
				if Counter < Advanced_Switch then
					State <= A1;
					Counter_Reset_I <= '0';
				else
					State <= S3;
					Counter_Reset_I <= '1';
				end if;
			when A3 =>
				if Counter < Advanced_Switch then
					State <= A3;
					Counter_Reset_I <= '0';
				else
					State <= S3;
					Counter_Reset_I <= '1';
				end if;
			when A5 =>
				if Counter < Advanced_Switch then
					State <= A5;
					Counter_Reset_I <= '0';
				else
					State <= S3;
					Counter_Reset_I <= '1';
				end if;
				
			-- Light States
			when S3 =>
				if Counter < Yellow_Switch then
					State <= S3;
					Counter_Reset_I <= '0';
				else
					State <= S4;
					Counter_Reset_I <= '1';
				end if;
			when S4 =>
				if Counter < Red_Switch then
					State <= S4;
					Counter_Reset_I <= '0';
				else
					State <= S5;
					Counter_Reset_I <= '1';
				end if;
			when S5 =>
				if Counter < Green_Switch then
					State <= S5;
					Counter_Reset_I <= '0';
				else
					if Left_Queue_NS = "01" then -- From South Left Car Queue
						State <= A0;
						Counter_Reset_I <= '1';
					elsif Left_Queue_NS = "10" then -- From North Left Car Queue
						State <= A2;
						Counter_Reset_I <= '1';
					elsif Left_Queue_NS = "11" then -- From South and North Left Car Queue
						State <= A4;
						Counter_Reset_I <= '1';
					else									-- No Left Car Queue
						State <= S0;
						Counter_Reset_I <= '1';
					end if;
				end if;
				
			-- Advanced Turn States
			when A0 =>
				if Counter < Advanced_Switch then
					State <= A0;
					Counter_Reset_I <= '0';
				else
					State <= S0;
					Counter_Reset_I <= '1';
				end if;
			when A2 =>
				if Counter < Advanced_Switch then
					State <= A2;
					Counter_Reset_I <= '0';
				else
					State <= S0;
					Counter_Reset_I <= '1';
				end if;
			when A4 =>
				if Counter < Advanced_Switch then
					State <= A4;
					Counter_Reset_I <= '0';
				else
					State <= S0;
					Counter_Reset_I <= '1';
				end if;
			when others =>
				null;
		end case;
	end if;
end process;
Counter_Reset <= Counter_Reset_I;


C2: process(State)
begin
	case State is
	 --when S0 => Lights <= "111111"&"111111"&"111111"&"111111";
	 when S0 => Lights <= "001010"&"100100"&"001010"&"100100";
	 when S1 => Lights <= "010010"&"100100"&"010010"&"100100";
	 when S2 => Lights <= "100100"&"100100"&"100100"&"100100";
	 when S3 => Lights <= "100100"&"001010"&"100100"&"001010";
	 when S4 => Lights <= "100100"&"010010"&"100100"&"010010";
	 when S5 => Lights <= "100100"&"100100"&"100100"&"100100";
	 
	 when A0 => Lights <= "100100"&"100100"&"001101"&"100100"; -- From South turning West
	 when A1 => Lights <= "100100"&"100100"&"100100"&"001101"; -- From West turning North
	 when A2 => Lights <= "001101"&"100100"&"100100"&"100100"; -- From North turning East
	 when A3 => Lights <= "100100"&"001101"&"100100"&"100100"; -- From East turning South
	 when A4 => Lights <= "100101"&"100100"&"100101"&"100100"; -- From North and South
	 when A5 => Lights <= "100100"&"100101"&"100100"&"100101"; -- From East and West
	 
	 when N0 => Lights <= "001010"&"100100"&"001010"&"100100"; -- Night State N/S Walk
	 when N1 => Lights <= "010010"&"100100"&"010010"&"100100"; -- Night State N/S Dont Walk
	 when N2 => Lights <= "100100"&"100100"&"100100"&"100100"; -- Night State E/W Walk
	 when N3 => Lights <= "100100"&"001010"&"100100"&"001010"; -- Night State E/W Dont Walk
	 
	 when others => Lights <= "111111"&"111111"&"111111"&"111111";
	end case;
end process C2;
end architecture arch_TrafficLights;